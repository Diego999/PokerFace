
package ch.hearc.coursjava.poo.derivation.form;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Dessin implements Iterable<Form>
	{
	
	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/
	
	private Dessin(List<Form> listeForm)
		{
		this.listeForm = listeForm;
		}
	
	public Dessin()
		{
		this(new ArrayList<Form>());
		}
	
	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/
	
	@Override
	public Iterator<Form> iterator()
		{
		return listeForm.iterator();
		}
	
	public double sumAire()
		{
		double sumAire = 0;
		for(Form form:this)
			{
			sumAire += form.aire();
			}
		return sumAire;
		}
	
	public double sumPerimetre()
		{
		double sumPerimetre = 0;
		for(Form form:this)
			{
			sumPerimetre += form.perimetre();
			}
		return sumPerimetre;
		}
	
	public boolean addForm(Form form)
		{
		return listeForm.add(form);
		}
	
	public boolean removeForm(Form form)
		{
		return listeForm.remove(form);
		}
	
	public Dessin cloneOf()
		{
		return new Dessin(this);
		}
	
	public boolean isEquale(Dessin dessin2)
		{
		if (listeForm.size() != dessin2.listeForm.size())
			{
			return false;
			}
		else
			{
			Iterator<Form> it = listeForm.iterator();
			
			for(Form form2:dessin2.listeForm)
				{
				
				}
			}
		}
	
	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/
	
	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/
	
	//input
	private List<Form> listeForm;
	
	}
