
package ch.hearc.miscellaneoustest.handpoker;

public class ComputeBestHandInASubset
{
	private static final int			LENGTH_HAND	= 5;
	private static final String			EMPTY		= "";
	private static final HandsPokerMap	HANDS_POKER_MAP			= HandsPokerMap.getInstance();
	
	private String[]					AVAILABLE_CHAR;
	private String[]					hand;
	private String						highestHand;
	
	public ComputeBestHandInASubset(String[] actualHand)
	{
		AVAILABLE_CHAR = new String[actualHand.length];
		for(int i = 0; i < actualHand.length; ++i)
		{
			AVAILABLE_CHAR[i] = new String(actualHand[i]);
		}
		
		hand = new String[LENGTH_HAND];
		highestHand = "";
	}
	
	public String getHighestHandValue()
	{
		searchHighestHand(0, 0);
		return highestHand;
	}
	
	private void searchHighestHand(int indexLastValueTaken, int indexCurrentHand)
	{
		if (indexCurrentHand < LENGTH_HAND)
		{
			for(int i = 0; i < AVAILABLE_CHAR.length; ++i)
			{
				if (AVAILABLE_CHAR[i] != EMPTY)
				{
					indexLastValueTaken = i;
					hand[indexCurrentHand] = AVAILABLE_CHAR[i];
					AVAILABLE_CHAR[i] = EMPTY;
				}
				else
				{
					continue;
				}
				
				searchHighestHand(0, indexCurrentHand + 1);
				
				AVAILABLE_CHAR[indexLastValueTaken] = hand[indexCurrentHand];
			}
		}
		else
		{
			StringBuilder handStr = new StringBuilder("");
			for(int i = 0; i < LENGTH_HAND; ++i)
			{
				handStr.append(hand[i]);
			}
			
			try
			{
				HandsPokerValue exHand = HANDS_POKER_MAP.getHand(handStr.toString());
				HandsPokerValue actualHand = HANDS_POKER_MAP.getHand(highestHand);
				
				if (exHand.compareTo(actualHand) > 0)
				{
					highestHand = handStr.toString();
				}
			}
			catch (NullPointerException e)
			{
			}
			
			handStr = new StringBuilder("");
		}
	}
}
