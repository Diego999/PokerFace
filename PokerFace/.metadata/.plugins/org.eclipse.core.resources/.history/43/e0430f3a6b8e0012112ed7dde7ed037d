
package ch.hearc.miscellaneoustest.handpoker;

public class ComputeBestHandInASubset
{

	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/

	//Poker with 5 cards
	private static final int			LENGTH_HAND		= 5;
	private static final String			EMPTY			= "";
	private static final HandsPokerMap	HANDS_POKER_MAP	= HandsPokerMap.getInstance();

	private String[]					available_characters;
	private String						highestHand;

	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/

	public ComputeBestHandInASubset(String[] actualHand)
	{
		highestHand = "";
		available_characters = new String[actualHand.length];

		for(int i = 0; i < actualHand.length; ++i)
		{
			available_characters[i] = new String(actualHand[i]);
		}
	}

	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/

	public String getHighestHand()
	{
		String[] hand = new String[LENGTH_HAND];
		searchHighestHand(0, 0, hand);
		return highestHand;
	}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private void searchHighestHand(int indexLastValueTaken, int indexCurrentHand, String[] hand)
	{
		if (indexCurrentHand < LENGTH_HAND)
		{
			for(int i = 0; i < available_characters.length; ++i)
			{
				if (available_characters[i] != EMPTY)
				{
					indexLastValueTaken = i;
					hand[indexCurrentHand] = available_characters[i];
					available_characters[i] = EMPTY;
				}
				else
				{
					continue;
				}

				searchHighestHand(0, indexCurrentHand + 1, hand);

				available_characters[indexLastValueTaken] = hand[indexCurrentHand];
			}
		}
		else
		{
			StringBuilder handStr = new StringBuilder("");
			for(int i = 0; i < LENGTH_HAND; ++i)
			{
				handStr.append(hand[i]);
			}

			try
			{
				HandsPokerValue exHand = HANDS_POKER_MAP.getHand(handStr.toString());
				HandsPokerValue actualHand = HANDS_POKER_MAP.getHand(highestHand);

				if (exHand.compareTo(actualHand) > 0)
				{
					highestHand = handStr.toString();
				}
			}
			catch (NullPointerException e)
			{
			}

			handStr = new StringBuilder("");
		}
	}
}
